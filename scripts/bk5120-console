#!/usr/bin/env python3
"""Small console to test different bus terminals with the BK5120 CANopen bus coupler"""
# pylint: disable=invalid-name

import argparse
import cmd
import sys

import canopen

DEFAULT_INTERFACE = "can0"


def parse_cli():
    """Parse command line arguments from sys.argv

    :return: Parsed command line arguments
    :rtype: argparse.Namespace
    """
    cli_parser = argparse.ArgumentParser(
        description="Control a BK5120 CANopen bus coupler"
    )

    cli_parser.add_argument(
        "interface",
        type=str,
        nargs="?",
        default=DEFAULT_INTERFACE,
        help=f"Socketcan interface to use (default: {DEFAULT_INTERFACE})",
    )

    return cli_parser.parse_args()


class BK5120Shell(cmd.Cmd):
    """Minimal BK5120 control shell

    :param network: CANopen network to use
    :type network: canopen.Network
    """

    # pylint: disable=no-self-use

    def __init__(self, network):
        self._network = network
        super().__init__()

    def help_quit(self):
        """Print help information for 'quit' command
        """
        print("Exit this shell")
        print()

    def do_quit(self, _):
        """Implementation of 'quit' command, exiting the shell

        :return: True, as this should exit the shell
        :rtype: bool
        """
        return True


def main():
    """Console entry point"""
    args = parse_cli()

    # Connect to bus
    with canopen.Network() as network:
        try:
            network.connect(bustype="socketcan", channel=args.interface)
        except OSError as ex:
            print(f"Could not open socketcan interface {args.interface}: {ex}")
            sys.exit(1)

        shell = BK5120Shell(network)
        return shell.cmdloop()


if __name__ == "__main__":
    main()
