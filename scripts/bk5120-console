#!/usr/bin/env python3
"""Small console to test different bus terminals with the BK5120 CANopen bus coupler"""
# pylint: disable=invalid-name

import argparse
import cmd
import sys

import canopen

DEFAULT_INTERFACE = "can0"
DEFAULT_ID = 1
DEFAULT_EDS = "BK5120.eds"


def parse_cli():
    """Parse command line arguments from sys.argv

    :return: Parsed command line arguments
    :rtype: argparse.Namespace
    """
    cli_parser = argparse.ArgumentParser(
        description="Control a BK5120 CANopen bus coupler"
    )

    cli_parser.add_argument(
        "interface",
        type=str,
        nargs="?",
        default=DEFAULT_INTERFACE,
        help=f"Socketcan interface to use (default: {DEFAULT_INTERFACE})",
    )
    cli_parser.add_argument(
        "id",
        type=int,
        nargs="?",
        default=DEFAULT_ID,
        help=f"Node id to connect to (default: {DEFAULT_ID})",
    )
    cli_parser.add_argument(
        "eds",
        type=argparse.FileType("r"),
        nargs="?",
        default=DEFAULT_EDS,
        help=f"Path to EDS file for the node (default: {DEFAULT_EDS})",
    )

    return cli_parser.parse_args()


class BK5120Shell(cmd.Cmd):
    """Minimal BK5120 control shell

    :param network: CANopen network to use
    :type network: canopen.Network
    :param node: CANopen node to control
    :type node: canopen.Node
    """

    # pylint: disable=no-self-use

    def __init__(self, network, node):
        self._network = network
        self._node = node

        super().__init__()

    def do_sdo(self, args):
        """Implementation of 'sdo' command

        :param args: Command argument
        :type args: list
        """
        split = [i for i in args.split(" ") if i != ""]

        if len(split) == 2 and split[0] == "get":
            address = int(split[1], 0)
            print(f"SDO at {address}: {self._node.sdo[address].raw}")
            print("")
        else:
            print("Usage: sdo get <address>")
            print("")

    def help_quit(self):
        """Print help information for 'quit' command
        """
        print("Exit this shell")
        print()

    def do_quit(self, _):
        """Implementation of 'quit' command, exiting the shell

        :return: True, as this should exit the shell
        :rtype: bool
        """
        return True


def main():
    """Console entry point"""
    args = parse_cli()
    print(
        (
            f"Using node {args.id} on interface {args.interface} with EDS file"
            f"{args.eds.name}"
        )
    )

    # Connect to bus
    with canopen.Network() as network:
        try:
            network.connect(bustype="socketcan", channel=args.interface)
        except OSError as ex:
            print(f"Could not open socketcan interface {args.interface}: {ex}")
            sys.exit(1)

        node = network.add_node(args.id, args.eds)

        shell = BK5120Shell(network, node)
        return shell.cmdloop()


if __name__ == "__main__":
    main()
